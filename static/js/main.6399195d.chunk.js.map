{"version":3,"sources":["redux/contactsRedux/contactsAction.js","redux/contactsRedux/contactsRedux.js","redux/contactsRedux/contactsOperations.js","redux/contactsRedux/contactsSelectors.js","redux/store.js","Components/Alert/Alert.jsx","Components/Form/Form.jsx","Components/ContactList/ContactList.jsx","Components/FilterName/FilterName.jsx","Components/Logo/Logo.jsx","App.jsx","index.js","transitionsCSS/fade.module.css","Components/Form/Form.module.css","Components/ContactList/ContactList.module.css","Components/Alert/Alert.module.css","Components/FilterName/FilterName.module.css","Components/Logo/Logo.module.css","App.module.css","transitionsCSS/appearSlide.module.css"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactsRequest","addContactsSuccess","addContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","changeFilter","itemsRedux","createReducer","contactsAction","_","payload","filter","contact","id","filterRedux","loadingRedux","errorRedux","message","combineReducers","items","loading","error","axios","defaults","baseURL","pathContacts","text","dispatch","name","number","post","then","data","catch","delete","get","getContactsFilter","state","contacts","getContactsItems","getContactsLoading","getContactsError","getVisibleFilterContacts","createSelector","allContacts","normalizedFilter","toLowerCase","includes","store","configureStore","reducer","contactsRedux","middleware","getDefaultMiddleware","concat","logger","devTools","Alert","className","style","alert","Form","alertRepetition","nameInputId","uuidv4","numberInputId","notify","field","toast","warn","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","handleSubmit","e","preventDefault","contactsProps","props","find","contactName","setState","reset","onSubmitForm","handleChange","currentTarget","value","onResetAlert","this","onSubmit","container","htmlFor","item","type","onChange","CSSTransition","in","length","timeout","classNames","fade","unmountOnExit","onEntered","Component","connect","contactsSelectors","contactsOperations","ContactList","onClickDelete","TransitionGroup","component","list","map","onClick","isLoadingContact","target","Logo","mixStyle","bind","App","fetchContacts","clearFilter","appear","appearSlide","onExit","color","height","width","errorContacts","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.6399195d.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nconst fetchContactsRequest = createAction('contacts/fetchContactsRequest');\nconst fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\nconst fetchContactsError = createAction('contacts/fetchContactsError');\n\nconst addContactsRequest = createAction('contacts/addContactsRequest');\nconst addContactsSuccess = createAction('contacts/addContactsSuccess');\nconst addContactsError = createAction('contacts/addContactsError');\n\nconst deleteContactsRequest = createAction('contacts/deleteContactsRequest');\nconst deleteContactsSuccess = createAction('contacts/deleteContactsSuccess');\nconst deleteContactsError = createAction('contacts/deleteContactsError');\n\nconst changeFilter = createAction('contacts/change_filter');\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactsRequest,\n  addContactsSuccess,\n  addContactsError,\n  deleteContactsRequest,\n  deleteContactsSuccess,\n  deleteContactsError,\n  changeFilter,\n};\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { contactsAction } from 'redux/contactsRedux';\n\nconst itemsRedux = createReducer([], {\n  [contactsAction.fetchContactsSuccess]: (_, { payload }) => payload,\n  [contactsAction.addContactsSuccess]: (_, { payload }) =>\n    /**добавляем новый контакт в в состояние контактов */\n    [..._, payload],\n\n  [contactsAction.deleteContactsSuccess]: (_, { payload }) =>\n    _.filter(contact => contact.id !== payload),\n});\n\nconst filterRedux = createReducer('', {\n  [contactsAction.changeFilter]: (_, { payload }) => payload,\n});\n\nconst loadingRedux = createReducer(false, {\n  [contactsAction.fetchContactsRequest]: () => true,\n  [contactsAction.fetchContactsSuccess]: () => false,\n  [contactsAction.fetchContactsError]: () => false,\n  [contactsAction.addContactsRequest]: () => true,\n  [contactsAction.addContactsSuccess]: () => false,\n  [contactsAction.addContactsError]: () => false,\n  [contactsAction.deleteContactsRequest]: () => true,\n  [contactsAction.deleteContactsSuccess]: () => false,\n  [contactsAction.deleteContactsError]: () => false,\n});\nconst errorRedux = createReducer(null, {\n  [contactsAction.fetchContactsError]: (_, { payload }) =>\n    'fetchContactsError: ' + payload.message,\n  [contactsAction.addContactsError]: (_, { payload }) =>\n    'addContactsError: ' + payload.message,\n  [contactsAction.deleteContactsError]: (_, { payload }) =>\n    'deleteContactsError: ' + payload.message,\n});\n\nexport default combineReducers({\n  items: itemsRedux,\n  filter: filterRedux,\n  loading: loadingRedux,\n  error: errorRedux,\n});\n","import axios from 'axios';\nimport { contactsAction } from 'redux/contactsRedux';\n\naxios.defaults.baseURL = 'http://localhost:4090';\nconst pathContacts = '/contacts';\n\nconst fetchContact = () => dispatch => {\n  dispatch(contactsAction.fetchContactsRequest());\n  axios\n    .get(pathContacts)\n    .then(({ data }) => dispatch(contactsAction.fetchContactsSuccess(data)))\n    .catch(error => dispatch(contactsAction.fetchContactsError(error)));\n};\n\nconst addContact = text => dispatch => {\n  const contact = {\n    /**создаём новый контакт (присвоим ему ID на бекенде) */\n    name: text.name,\n    number: text.number,\n  };\n\n  dispatch(contactsAction.addContactsRequest());\n  axios\n    .post(pathContacts, contact)\n    .then(({ data }) => dispatch(contactsAction.addContactsSuccess(data)))\n    .catch(error => dispatch(contactsAction.addContactsError(error)));\n};\n\nconst deleteContact = id => dispatch => {\n  dispatch(contactsAction.deleteContactsRequest());\n  axios\n    .delete(`${pathContacts}/${id}`)\n    .then(() => dispatch(contactsAction.deleteContactsSuccess(id)))\n    .catch(error => dispatch(contactsAction.deleteContactsError(error)));\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { addContact, deleteContact, fetchContact };\n","import { createSelector } from 'reselect';\n\nconst getContactsFilter = state => state.contacts.filter;\nconst getContactsItems = state => state.contacts.items;\nconst getContactsLoading = state => state.contacts.loading;\nconst getContactsError = state => state.contacts.error;\n\nconst getVisibleFilterContacts = createSelector(\n  [getContactsFilter, getContactsItems],\n  (filter, allContacts) => {\n    const normalizedFilter = filter.toLowerCase();\n    return allContacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  getContactsFilter,\n  getContactsItems,\n  getContactsLoading,\n  getContactsError,\n  getVisibleFilterContacts,\n};\n","import { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport { contactsRedux } from 'redux/contactsRedux';\n\nconst store = configureStore({\n  reducer: { contacts: contactsRedux },\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(logger),\n  devTools: true,\n});\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { store };\n\n// import {\n//   persistStore,\n//   persistReducer,\n//   FLUSH,\n//   REHYDRATE,\n//   PAUSE,\n//   PERSIST,\n//   PURGE,\n//   REGISTER,\n// } from 'redux-persist';\n// import storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\n\n// const persistConfig = {\n//   key: 'listContacts',\n//   storage,\n//   whitelist: ['items'],\n// };\n// const store = configureStore({\n//   reducer: { contacts: persistReducer(persistConfig, contactsRedux) },\n//   middleware: getDefaultMiddleware =>\n//     getDefaultMiddleware({\n//       serializableCheck: {\n//         ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n//       },\n//     }).concat(logger),\n//   devTools: true,\n// });\n\n// const persiststore = persistStore(store);\n\n// export default { store, persiststore };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './Alert.module.css';\n/* eslint react/prop-types: 1 */\n\nconst Alert = ({ message }) => (\n  <>\n    <p className={style.alert}>{message}</p>\n  </>\n);\n\nAlert.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Alert;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { contactsOperations, contactsSelectors } from 'redux/contactsRedux';\nimport Alert from 'Components/Alert/Alert';\n//* import style\nimport 'react-toastify/dist/ReactToastify.css';\nimport style from './Form.module.css';\nimport fade from 'transitionsCSS/fade.module.css';\nimport { CSSTransition } from 'react-transition-group';\n\n/* eslint react/prop-types: 1 */\n\nclass Form extends Component {\n  static propTypes = {\n    onSubmitForm: PropTypes.func,\n    contacts: PropTypes.arrayOf(\n      PropTypes.exact({\n        id: PropTypes.number,\n        name: PropTypes.string,\n        number: PropTypes.string,\n      }),\n    ),\n  };\n\n  state = { name: '', number: '', alertRepetition: '' };\n\n  nameInputId = uuidv4();\n  numberInputId = uuidv4();\n\n  notify = field =>\n    toast.warn(`поле ${field} не должно бить пустым`, {\n      position: 'top-left',\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = this.state;\n    const contactsProps = this.props.contacts;\n    if (!name) {\n      this.notify('Name');\n    }\n    if (!number) {\n      this.notify('Number');\n    }\n    if (contactsProps.find(contactName => contactName.name === name)) {\n      /**проверка на повторение имён */\n      this.setState({ alertRepetition: `${name} is already in contacts!` });\n      this.reset();\n      return;\n    }\n    if (name && number) {\n      this.props.onSubmitForm(this.state);\n    }\n\n    this.reset();\n  };\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  onResetAlert = () => {\n    this.setState({ alertRepetition: '' });\n  };\n\n  render() {\n    const { name, number, alertRepetition } = this.state;\n    return (\n      <>\n        <form onSubmit={this.handleSubmit} className={style.container}>\n          <label htmlFor={this.nameInputId} className={style.item}>\n            Name\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={this.handleChange}\n              id={this.nameInputId}\n            />\n          </label>\n          <label htmlFor={this.numberInputId} className={style.item}>\n            Number\n            <input\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              onChange={this.handleChange}\n              id={this.numberInputId}\n            />\n          </label>\n          <ToastContainer />\n          <button type=\"submit\">Add contact</button>\n        </form>\n        <CSSTransition\n          //TODO Анимация появления-исчезания предупреждения о совпадении имён по условию\n          in={alertRepetition.length > 0}\n          timeout={3000}\n          classNames={fade}\n          unmountOnExit\n          onEntered={() => this.onResetAlert()}\n        >\n          <Alert message={alertRepetition} />\n        </CSSTransition>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getContactsItems(state),\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSubmitForm: contact => dispatch(contactsOperations.addContact(contact)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { contactsOperations, contactsSelectors } from 'redux/contactsRedux';\n//* импорт стилей\nimport style from './ContactList.module.css';\nimport fade from 'transitionsCSS/fade.module.css';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\n/* eslint react/prop-types: 1 */\n\nclass ContactList extends Component {\n  static propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.exact({\n        id: PropTypes.number,\n        name: PropTypes.string,\n        number: PropTypes.string,\n      }),\n    ).isRequired,\n    onClickDelete: PropTypes.func.isRequired,\n  };\n  render() {\n    const { contacts, onClickDelete } = this.props;\n    return (\n      // TODO Добавление анимации на добавление-удаление списка контактов\n      <TransitionGroup component=\"ul\" className={style.list}>\n        {contacts &&\n          contacts.map(contact => (\n            <CSSTransition key={contact.id} timeout={250} classNames={fade}>\n              <li key={contact.id} className={style.item}>\n                <p className={style.contact}>\n                  <span>{contact.name}:</span>\n                  <span>{contact.number}</span>\n                </p>\n                <button type=\"button\" onClick={() => onClickDelete(contact.id)}>\n                  Delete\n                </button>\n              </li>\n            </CSSTransition>\n          ))}\n      </TransitionGroup>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  /** фильтруем, показываем только те что совпадают*/\n  return {\n    contacts: contactsSelectors.getVisibleFilterContacts(state),\n    isLoadingContact: contactsSelectors.getContactsLoading(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onClickDelete: id => dispatch(contactsOperations.deleteContact(id)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport style from './FilterName.module.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { contactsAction, contactsSelectors } from 'redux/contactsRedux';\n\n/* eslint react/prop-types: 1 */\n\nconst FilterName = ({ value, onChange }) => (\n  <label className={style.container}>\n    Find contacts by name\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\n\nFilterName.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  value: contactsSelectors.getContactsFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactsAction.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterName);\n","import React from 'react';\nimport style from './Logo.module.css';\n\nconst Logo = () => <h2 className={style.Logo}>Phonebook</h2>;\n\nexport default Logo;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Loader from 'react-loader-spinner';\nimport {\n  contactsAction,\n  contactsOperations,\n  contactsSelectors,\n} from 'redux/contactsRedux';\nimport Form from './Components/Form/Form';\nimport ContactList from './Components/ContactList/ContactList';\nimport FilterName from './Components/FilterName/FilterName';\nimport Logo from 'Components/Logo/Logo';\nimport classNames from 'classnames/bind';\n//*import style\nimport style from './App.module.css';\nimport appearSlide from './transitionsCSS/appearSlide.module.css'; /**модули CSS указывать до CSSTransition */\nimport fade from './transitionsCSS/fade.module.css';\nimport { CSSTransition } from 'react-transition-group';\n\n/* eslint react/prop-types: 1 */\n\nlet mixStyle = classNames.bind(style);\n\nclass App extends Component {\n  static propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.exact({\n        id: PropTypes.number,\n        name: PropTypes.string,\n        number: PropTypes.string,\n      }),\n    ),\n    isLoadingContact: PropTypes.bool,\n    errorContacts: PropTypes.string,\n    clearFilter: PropTypes.func,\n    fetchContacts: PropTypes.func,\n  };\n\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    const { contacts, clearFilter, isLoadingContact } = this.props;\n    return (\n      <>\n        <CSSTransition\n          //TODO добавляем анимацию появления Logo при загрузке страницы\n          in={true}\n          appear={true}\n          timeout={500}\n          classNames={appearSlide}\n          unmountOnExit\n        >\n          <Logo />\n        </CSSTransition>\n        <Form\n        // ? функция добавления контакта реализована через Redux\n        ></Form>\n        <CSSTransition\n          //TODO Анимация появления-исчезания поля для фильтра контактов по условию\n          in={contacts.length > 1}\n          timeout={500}\n          classNames={fade}\n          unmountOnExit\n          onExit={() => clearFilter()}\n        >\n          <FilterName />\n        </CSSTransition>\n        <h2 className={mixStyle('title', 'center')}>Contacts</h2>\n        {isLoadingContact ? (\n          <Loader\n            className={mixStyle('center')}\n            type=\"Oval\"\n            color=\"#1976d2\"\n            height={100}\n            width={100}\n            timeout={0} //3 secs\n          />\n        ) : (\n          <ContactList />\n        )}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contacts: contactsSelectors.getContactsItems(state),\n    isLoadingContact: contactsSelectors.getContactsLoading(state),\n    errorContacts: contactsSelectors.getContactsError(state),\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    clearFilter: () => dispatch(contactsAction.changeFilter('')),\n    fetchContacts: () => dispatch(contactsOperations.fetchContact()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from 'redux/store.js';\nimport App from './App.jsx';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <BrowserRouter>\n        {/* <PersistGate loading={null} persistor={store.persiststore}> */}\n        <App />\n        {/* </PersistGate> */}\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"fade_enter__3PxoH\",\"enterActive\":\"fade_enterActive__3-c75\",\"exit\":\"fade_exit__1JQWk\",\"exitActive\":\"fade_exitActive__18eOz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Form_container__MEAdH\",\"item\":\"Form_item__16oND\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__10P4s\",\"item\":\"ContactList_item__2zHiv\",\"contact\":\"ContactList_contact__1xYKD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert\":\"Alert_alert__lqu0t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FilterName_container__379KY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Logo_Logo__3fK01\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__2NpmL\",\"center\":\"App_center__1QolQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"appearSlide_appear__3OEE-\",\"appearActive\":\"appearSlide_appearActive__3-PPs\"};"],"sourceRoot":""}